generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  name            String
  email           String    @unique
  emailVerified   Boolean
  image           String?
  createdAt       DateTime
  updatedAt       DateTime
  displayUsername String?
  username        String?   @unique
  accounts        Account[]
  receipts        Receipt[]
  sessions        Session[]
  walletConnection      WalletConnection[]
  transaction_history   TransactionHistory[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Receipt {
  id             String   @id @default(uuid())
  userId         String
  amount         Float
  date           DateTime
  vendor         String
  category       String
  transactionFee Float
  imageUrl       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  blockchainHash String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  transaction_history   TransactionHistory[]

  @@map("receipt")
}


model WalletConnection{
  id                  String    @id @default(uuid())
  wallet_address      String    @unique
  createdAt           DateTime  @default(now())
  userId              String
  user                User      @relation(fields:[userId],references:[id],onDelete:Cascade)
  transaction_history TransactionHistory[]
  @@map("wallet_connection")

}


model TransactionHistory{
  id                String      @id @default(uuid())
  userId            String
  wallet_address    String
  receiptId         String
  network           String
  blockNumber       BigInt
  gas               BigInt
  receipt           Receipt    @relation(fields: [receiptId],references: [id],onDelete: Cascade)
  user              User        @relation(fields: [userId],references: [id],onDelete: Cascade)
  walletConnection  WalletConnection    @relation(fields: [wallet_address],references: [id],onDelete: Cascade) 
   createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  @@map("transaction_history")           
}